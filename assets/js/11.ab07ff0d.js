(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{592:function(t,e,n){"use strict";n.r(e);var s=n(17),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("并发编程，可以说一直都是开发者们关注最多的主题之一。而 Golang 作为一个出道就自带“高并发”光环的编程语言，其并发编程的实现原理肯定是值得我们深入探究的。")]),t._v(" "),n("p",[t._v("Go 并发编程模型在底层是由操作系统所提供的线程库支撑的，这里先简要介绍一下线程实现模型的相关概念。")]),t._v(" "),n("h1",{attrs:{id:"线程的实现模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的实现模型"}},[t._v("#")]),t._v(" 线程的实现模型")]),t._v(" "),n("p",[t._v("线程的实现模型主要有3个，分别是：用户级线程模型、内核级线程模型和两极线程模型。它们之间最大的差异在于用户线程和内核调度实体（KSE）之间的对应关系上。\n内核调度实体就是可以被操作系统内核调度器调度的对象，也可以称为内核级线程，是操作系统内核的最小调度单元")])])}),[],!1,null,null,null);e.default=a.exports}}]);